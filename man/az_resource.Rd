% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/az_resource.R
\docType{class}
\name{az_resource}
\alias{az_resource}
\title{Azure resource class}
\format{An R6 object of class \code{az_resource}.}
\usage{
az_resource
}
\description{
Class representing a generic Azure resource.
}
\section{Methods}{

\itemize{
\item \code{new(...)}: Initialize a new resource object. See 'Initialization' for more details.
\item \code{delete(..., confirm=TRUE, wait=FALSE)}: Delete this resource, after a confirmation check. Optionally wait for the delete to finish.
\item \code{update(...)}: Update this resource on the host.
\item \code{sync_fields()}: Update the fields in this object with information from the host. Returns the \code{properties$provisioningState} field, so you can query this programmatically to check if a resource has finished provisioning. Not all resource types require explicit provisioning, in which case this method will return NULL.
\item \code{set_api_version(api_version)}: Set the API version to use when interacting with the host. By default, use the latest API version available.
\item \code{do_operation(...)} Carry out an operation. See 'Operations' for more details.
}
}

\section{Initialization}{

There are multiple ways to initialize a new resource object. The \code{new()} method can retrieve an existing resource, deploy/create a new resource, or create an empty/null object (without communicating with the host), based on the arguments you supply.

All of these initialization options have the following arguments in common.
\enumerate{
\item \code{token}: An OAuth 2.0 token, as generated by \link{get_azure_token}.
\item \code{subscription}: The subscription ID.
\item \code{api_version}: Optionally, the API version to use when interacting with the host. By default, this is NULL in which case the latest API version will be used.
\item A set of \emph{identifying arguments}:
\itemize{
\item \code{resource_group}: The resource group containing the resource.
\item \code{id}: The full ID of the resource. This is a string of the form \code{/subscriptions/{uuid}/resourceGroups/{resource-group-name}/provider/{resource-provider-name}/{resource-path}/{resource-name}}.
\item \code{provider}: The provider of the resource, eg \code{Microsoft.Compute}.
\item \code{path}: The path to the resource, eg \code{virtualMachines}.
\item \code{type}: The combination of provider and path, eg \code{Microsoft.Compute/virtualMachines}.
\item \code{name}: The name of the resource instance, eg \code{myWindowsVM}.
}
}

Providing \code{id} will fill in the values for all the other identifying arguments. Similarly, providing \code{type} will fill in the values for \code{provider} and \code{path}. Unless you provide \code{id}, you must also provide \code{name}.

The default behaviour for \code{new()} is to retrieve an existing resource, which occurs if you supply only the arguments listed above. If you also supply an argument \code{deployed_properties=NULL}, this will create a null object. If you supply any other (named) arguments, \code{new()} will create a new object on the host, with the supplied arguments as parameters.

Generally, the easiest way to initialize an object is via the \code{get_resource}, \code{create_resource} or \code{list_resources} methods of the \link{az_resource_group} class, which will handle all the gory details automatically.
}

\section{Operations}{

The \code{do_operation()} method allows you to carry out arbitrary operations on the resource. It takes the following arguments:
\itemize{
\item \code{op}: The operation in question, which will be appended to the URL path of the request.
\item \code{options}: A named list giving the URL query parameters.
\item \code{...}: Other named arguments passed to \link{call_azure_rm}, and then to the appropriate call in httr. In particular, use \code{body} to supply the body of a PUT, POST or PATCH request.
\item \code{http_verb}: The HTTP verb as a string, one of \code{GET}, \code{PUT}, \code{POST}, \code{DELETE}, \code{HEAD} or \code{PATCH}.
}

Consult the Azure documentation for your resource to find out what operations are supported.
}

\seealso{
\link{az_resource_group}, \link{call_azure_rm}, \link{call_azure_url},
\href{https://docs.microsoft.com/en-us/rest/api/resources/resources}{Resources API reference}
}
\keyword{datasets}
